%%% Beginning of file `configuration.nw'

%% Author: Raghavendra Nyshadham <rn@raghnysh.com>
%%
%% I place this file in the public domain through the Creative Commons
%% CC0 1.0 Universal Public Domain Dedication, and waive all copyright
%% and related rights to the work.  See
%%
%% http://creativecommons.org/publicdomain/zero/1.0/
%%
%% for the CC0 dedication.

\documentclass{article}

\usepackage{configuration}

\addbibresource{configuration.bib}

\title{My NixOS configuration}

\hypersetup{pdftitle={My NixOS configuration}}

\hypersetup{pdfsubject={Computer programming}}

\newcommand{\cczero}{I place this document in the public domain
  through the Creative Commons CC0 1.0 Universal Public Domain
  Dedication, and waive all copyright and related rights to the work.
  See \url{http://creativecommons.org/publicdomain/zero/1.0/} for the
  CC0 dedication.}

\author{Raghavendra Nyshadham\thanks{\cczero} \\
  {\normalsize\nolinkurl{rn@raghnysh.com}}}

\hypersetup{pdfauthor={Raghavendra Nyshadham (rn@raghnysh.com)}}

\date{2023-10-02}

\begin{document}

\begin{titlingpage}
  \maketitle

  \begin{abstract}
    This document describes my NixOS configuration.  I use the Noweb
    literate programming system to obtain from this document a NixOS
    configuration file and a PDF file of the document.  The current
    version of the document is available at
    \url{https://github.com/raghnysh/nixoscfg}.

    \ghtopics{nixos, system-configuration}
  \end{abstract}
\end{titlingpage}

\tableofcontents

\section{Introduction}
\label{sec:xikfhzau}

This document describes my NixOS configuration.  I use the Noweb
literate programming system to obtain from this document a NixOS
configuration file and a PDF file of the document.  The current
version of the document is available at
\url{https://github.com/raghnysh/nixoscfg}.

The NixOS configuration consists of a single file
\filename{configuration.nix}, which is located in the directory
\filename{/etc/nixos/}.  This is the configuration file that Noweb
generates from this document.  The file consists entirely of settings
for various parameters.  There are broadly two kinds of settings:
system settings and user settings.  System settings are for parameters
that affect the entire system, whereas user settings are for
parameters that affect just the current user, that is, me.

The system settings are fully documented in the man page of
\filename{configuration.nix} \parencite{bib:5ndx9q4j}.  As for the
user settings, I use the NixOS module \emph{Home Manager}, which
enables me to include the user settings also in the file
\filename{configuration.nix}.  The settings provided by Home Manager
are documented in the man page of \filename{home-configuration.nix}
\parencite{bib:vxfvl1fo}.

Without the Home Manager NixOS module, the user settings would be
distributed over multiple files in my home directory, such as
\filename{.bashrc}, \filename{.inputrc}, and
\filename{.emacs.d/init.el}.  I find it inconvenient to spread the
configuration like this, and prefer to have all my settings in a
single file.  (It is even better that this single file
\filename{configuration.nix} contains the system settings also because
it means that I only have to keep track of this one file for the
entire configuration of the computer.  No more worries about backing
up varied configuration files scattered over the hard disk.)

\section{Base versions}
\label{sec:nfbc9c13}

I first specify the base versions of NixOS and Home Manager.  NixOS
and Home Manager will try to remain compatible with the respective
base versions whenever they are upgraded.  I installed Home Manager
for the NixOS 23.05 release, so I will use that number as the common
base version of both NiXOS and Home Manager.

\begin{codechunk}
\nextchunklabel{chk:v2y4tcc5}
<<Common base version>>=
23.05
@
\end{codechunk}

\begin{codechunk}
\nextchunklabel{chk:ab5rprt3}
<<System base version setting>>=
system.stateVersion = "<<Common base version>>";
@ %def system.stateVersion
\end{codechunk}

\begin{codechunk}
\nextchunklabel{chk:n2jcgc64}
<<Home Manager base version setting>>=
home.stateVersion = "<<Common base version>>";
@ %def home.stateVersion
\end{codechunk}

\section{Networking}
\label{sec:wtcs4nl2}

The networking setup is quite simple.  I just set the hostname of the
computer, and hand over the control of everything else to the
NetworkManager application \parencite{bib:abdahnqa}.

\begin{codechunk}
\nextchunklabel{chk:ldypnl10}
<<Network settings>>=
<<Hostname setting>>
<<Pass control to NetworkManager>>
@
\end{codechunk}

\begin{codechunk}
\nextchunklabel{chk:5f4lk1lm}
<<Hostname setting>>=
networking.hostName = "bastet";
@ %def networking.hostname
\end{codechunk}

\begin{codechunk}
\nextchunklabel{chk:3jf5xa81}
<<Pass control to NetworkManager>>=
networking.networkmanager.enable = true;
@ %def networking.networkmanager.enable
\end{codechunk}

The users who need to control the NetworkManager application must be
added to the appropriate user group:
\begin{codechunk}
\nextchunklabel{chk:oqyve0v3}
<<NetworkManager group>>=
networkmanager
@ %def networkmanager
\end{codechunk}

\section{Date and time}
\label{sec:jhrur9yx}

The date and time settings are specified by the time zone.
\begin{codechunk}
\nextchunklabel{chk:smjj65dp}
<<Time zone setting>>=
time.timeZone = "Asia/Kolkata";
@ %def time.timeZone
\end{codechunk}

\section{Locale settings}
\label{sec:3dmlfks5}

\firstterm{Locale} settings specify the language used on this system
for messages and such, and the preferences for linguistic aspects of
the user interface of the system such as the order of characters to be
used in sorting \parencite{bib:nhg983t7}.  These settings are a part
of the process of \firstterm{internationalisation} (which word is
abbreviated as \firstterm{i18n}), whose aim is to design software so
that it can be easily adapted to different cultural environments
\parencite{bib:kiy97d4i}.
\begin{codechunk}
\nextchunklabel{chk:2uu0q8ox}
<<Locale settings>>=
<<Base language setting>>
<<Sorting order setting>>
@
\end{codechunk}

The base language setting is used by applications as the default
specification of language when there is no other explicit instruction
as to what language should be used by the application for its user
interfaces.  I choose British English, the language and the variant of
that language that I am most comfortable with.
\begin{codechunk}
\nextchunklabel{chk:k2trmtxk}
<<Base language setting>>=
i18n.defaultLocale = "en_GB.UTF-8";
@ %def i18n.defaultLocale
\end{codechunk}

When a list of words is sorted (as in the output of the \nwverb|ls|
command), an order that is commonly used is one in which numbers
precede upper case letters, which in turn precede lower case letters.
This order is specified with the following locale setting:
\begin{codechunk}
\nextchunklabel{chk:9qh82y4i}
<<Sorting order setting>>=
i18n.extraLocaleSettings.LC_COLLATE = "C.UTF-8";
@ %def i18n.extraLocaleSettings.LC_COLLATE
\end{codechunk}

\section{Unfree packages}
\label{sec:deod83sq}

The \filename{configuration.nix} file that was created when I first
installed NixOS allowed unfree packages to be installed on the
computer.  I don't know why this was so, but it seems best to leave it
as such.
\begin{codechunk}
\nextchunklabel{chk:gcdlllyw}
<<Unfree packages setting>>=
nixpkgs.config.allowUnfree = true;
@ %def nixpkgs.config.allowUnfree
\end{codechunk}

\section{Suspension on lid closure}
\label{sec:9a4uflmp}

I would like to suspend the computer when the laptop lid is closed, as
was the case in my previous Linux Mint setup.  The default
configuration of the system ensures that the computer is suspended
when the laptop lid is closed and no external monitor is attached to
the laptop.  It takes a bit of configuration to ensure that the
computer is suspended when the laptop lid is closed and an external
monitor is attached to the laptop.

Suspension is controlled by a system service called
\firstterm{systemd-logind} \parencite{bib:x9v7o65s}.  The settings of
this service are specified in a file called \filename{logind.conf}
\parencite{bib:p9pioc5i}.  I specify that the \nwverb|systemd-logind|
service should suspend the computer when the laptop lid is closed and
an external monitor is attached to the laptop.
\begin{codechunk}
\nextchunklabel{chk:uhhhefz3}
<<Logind setting for lid closure>>=
services.logind.lidSwitchDocked = "suspend";
@ %def services.logind.lidSwitchDocked
\end{codechunk}

This does not work because the system-wide power manager
\firstterm{UPower} also tries to control what happens when the laptop
lid is closed \parencite{bib:872u2noz}.  It seems to inhibit the
suspension of the computer by \nwverb|systemd-logind| when the lid is
closed in the presence of an external monitor.  I therefore specify
that \nwverb|UPower| should ignore the laptop lid.
\begin{codechunk}
\nextchunklabel{chk:vj3wncpe}
<<UPower setting for laptop lid>>=
services.upower.ignoreLid = true;
@ %def services.upower.ignoreLid
\end{codechunk}
I learnt of the role of \nwverb|UPower| in this issue from an article
by \textcite{bib:d08j7tjg}.

I now combine the \nwverb|systemd-logind| and \nwverb|UPower|
settings.
\begin{codechunk}
\nextchunklabel{chk:i0bdh589}
<<Lid closure settings>>=
<<Logind setting for lid closure>>
<<UPower setting for laptop lid>>
@
\end{codechunk}

\section{Bootloader}
\label{sec:7vkm2mz8}

The \firstterm{bootloader} is a program that is responsible for
booting the computer \parencite{bib:rezy6nz0}.  The following settings
are taken unchanged from the original file
\filename{configuration.nix} that was created by the NixOS installer.
I did not learn more about them because I did not need to modify them.

\begin{codechunk}
\nextchunklabel{chk:ci46g78f}
<<Bootloader settings>>=
boot.loader.systemd-boot.enable = true;
boot.loader.efi.canTouchEfiVariables = true;
@ %def boot.loader.systemd-boot.enable
@ %def boot.loader.efi.canTouchEfiVariables
\end{codechunk}

\section{Graphical environment}
\label{sec:ba88v5eg}

For the graphical user interface of the NixOS operating system, I have
left unchanged the original settings created by the NixOS installer.
I did not explore these settings because I did not need to modify
them.

\begin{codechunk}
\nextchunklabel{chk:vvehkrpj}
<<Graphical environment settings>>=
services.xserver.enable = true;
services.xserver.displayManager.gdm.enable = true;
services.xserver.desktopManager.gnome.enable = true;
services.xserver.layout = "us";
services.xserver.xkbVariant = "";
@ %def services.xserver.enable
@ %def services.xserver.displayManager.gdm.enable
@ %def services.xserver.desktopManager.gnome.enable
@ %def services.xserver.layout
@ %def services.xserver.xkbVariant
\end{codechunk}

\section{Printing}
\label{sec:9z18mjmr}

I have kept the configuration of the printing software as it was
created by the NixOS installer.

\begin{codechunk}
\nextchunklabel{chk:aquk20pl}
<<Setting for printing>>=
services.printing.enable = true;
@ %def services.printing.enable
\end{codechunk}

\section{Sound}
\label{sec:5vk5vbq4}

The settings for the sound input and output systems are kept unchanged
from the NixOS installation.  I do not know what these settings mean,
and did not bother to learn about them because I did not need to
modify them.

\begin{codechunk}
\nextchunklabel{chk:8j9bit25}
<<Settings for sound>>=
sound.enable = true;
hardware.pulseaudio.enable = false;
security.rtkit.enable = true;
services.pipewire.enable = true;
services.pipewire.alsa.enable = true;
services.pipewire.alsa.support32Bit = true;
services.pipewire.pulse.enable = true;
@ %def sound.enable
@ %def hardware.pulseaudio.enable
@ %def security.rtkit.enable
@ %def services.pipewire.enable
@ %def services.pipewire.alsa.enable
@ %def services.pipewire.alsa.support32Bit
@ %def services.pipewire.pulse.enable
\end{codechunk}

\section{My user profile}
\label{sec:qopaextu}

My username on this computer is
\begin{codechunk}
\nextchunklabel{chk:wqb5wrwq}
<<My username>>=
raghnysh
@ %def raghnysh
\end{codechunk}
which is an abbreviation of my name
\begin{codechunk}
\nextchunklabel{chk:inddl4ui}
<<My name>>=
Raghavendra Nyshadham
@
\end{codechunk}

My user profile is configured through the attribute set
\begin{codechunk}
\nextchunklabel{chk:wcdabdty}
<<My user profile>>=
users.users.<<My username>>
@ %def users.users.raghnysh
\end{codechunk}

The first attribute I add to my user profile set is my name:
\begin{codechunk}
\nextchunklabel{chk:4n5aawhc}
<<My user profile settings>>=
<<My user profile>>.description = "<<My name>>";
@ %def users.users.raghnysh.description
\end{codechunk}

I am a ``real'' user as opposed to a ``system'' user such as the user
\nwverb|cups| which manages printing services on this computer.
\begin{codechunk}
\nextchunklabel{chk:ynaxhugb}
<<My user profile settings>>=
<<My user profile>>.isNormalUser = true;
@ %def users.users.raghnysh.isNormalUser
\end{codechunk}

I have to be a member of the user group \nwverb|wheel| to carry out
administrative tasks on the computer using the \nwverb|sudo| command.
\begin{codechunk}
\nextchunklabel{chk:p7mkklj7}
<<My user groups>>=
wheel
@ %def wheel
\end{codechunk}
I also have to be able to control the NetworkManager application to
make changes to the network configuration whenever needed, so I have
to be a member of the appropriate user group.
\begin{codechunk}
\nextchunklabel{chk:zmd46nq3}
<<My user groups>>=
<<NetworkManager group>>
@
\end{codechunk}
I add the list of the user groups which contain me to my user profile
set.
\begin{codechunk}
\nextchunklabel{chk:2ddciyul}
<<My user profile settings>>=
<<My user profile>>.extraGroups = [
  <<My user groups>>
];
@ %def users.users.raghnysh.extraGroups
\end{codechunk}
That completes the declaration of my user profile.

\section{General settings of Home Manager}
\label{sec:jpohtaim}

The settings for Nixpkgs \parencite{bib:krparfs8}, the software
packaging system of NixOS, can be specified either through the system
configuration that applies to all users, or through the Home Manager
configuration that applies only to specific users.  According to the
Home Manager manual \parencite{bib:p9hb002v}, the former method
``saves an extra Nixpkgs evaluation, adds consistency, and removes the
dependency on NIX\_PATH'', so I use it.
\begin{codechunk}
\nextchunklabel{chk:spfjj8sn}
<<General settings of Home Manager>>=
home-manager.useGlobalPkgs = true;
@
\end{codechunk}

Home Manager by default installs Nixpkgs packages in a directory under
my home directory.  Alternatively, there is an option which makes Home
Manager install these packages in a user-specific directory under
\filename{/etc/}.  The Home Manager manual \parencite{bib:p9hb002v}
says that this ``option may become the default value in the future'',
so I choose this option.
\begin{codechunk}
\nextchunklabel{chk:nb5ml4v1}
<<General settings of Home Manager>>=
home-manager.useUserPackages = true;
@
\end{codechunk}

\section{Embedding the Home Manager configuration}
\label{sec:o3ar6a7a}

I embed the Home Manager configuration into the system settings file
\filename{configuration.nix} instead of maintaining a separate
configuration file for Home Manager.  My settings of Home Manager are
defined by an attribute in \filename{configuration.nix} called
\begin{codechunk}
\nextchunklabel{chk:snqjctlt}
<<Home Manager user attribute name>>=
home-manager.users.<<My username>>
@ %def home-manager.users.raghnysh
\end{codechunk}

The \nwverb|home-manager.*| attributes used here and in
\Cref{sec:jpohtaim} are provided by the NixOS module for Home Manager.
\begin{codechunk}
\nextchunklabel{chk:e9swsiot}
<<Home Manager NixOS module path>>=
"${<<Home Manager path>>}/nixos"
@
\end{codechunk}

The Home Manager path used above is the path to which the Home Manager
tarball is downloaded.
\begin{codechunk}
\nextchunklabel{chk:t5941yr3}
<<Home Manager path>>=
builtins.fetchTarball {
  url = "https://github.com/nix-community/home-manager/archive/release-23.05.tar.gz";
  sha256 = "0rwzab51hnr6cmm1w5zmfh29gbkg6byv8jnr7frcv5kd6m8kna41";
}
@
\end{codechunk}

\section{Import of modules}
\label{sec:wk15aj6o}

\begin{codechunk}
\nextchunklabel{chk:qbq68axo}
<<Imports setting>>=
imports = [
  ./hardware-configuration.nix
  <<Home Manager NixOS module path>>
];
@
\end{codechunk}

\section{Assembling the configuration file}
\label{sec:p9imo12d}

\begin{codechunk}
\nextchunklabel{chk:o7ygwvzn}
<<configuration-noweb.nix>>=
{
  <<Imports setting>>
  <<System base version setting>>
  <<Bootloader settings>>
  <<Network settings>>
  <<Time zone setting>>
  <<Locale settings>>
  <<Unfree packages setting>>
  <<Graphical environment settings>>
  <<Setting for printing>>
  <<Settings for sound>>
  <<Lid closure settings>>
  <<My user profile settings>>
  <<General settings of Home Manager>>
  <<Home Manager user attribute name>> = { pkgs, ... }: {
    <<Home Manager base version setting>>
  };
}
@
\end{codechunk}

\bibsection

\nowebchunkssection

\nowebindexsection

\end{document}

%%% End of file `configuration.nw'
