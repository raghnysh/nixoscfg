%%% Beginning of file `configuration.nw'

%% Author: Raghavendra Nyshadham <rn@raghnysh.com>
%%
%% I place this file in the public domain through the Creative Commons
%% CC0 1.0 Universal Public Domain Dedication, and waive all copyright
%% and related rights to the work.  See
%%
%% http://creativecommons.org/publicdomain/zero/1.0/
%%
%% for the CC0 dedication.

\documentclass{article}

\usepackage{configuration}

\addbibresource{configuration.bib}

\title{My NixOS configuration}

\hypersetup{pdftitle={My NixOS configuration}}

\hypersetup{pdfsubject={Computer programming}}

\newcommand{\cczero}{I place this document in the public domain
  through the Creative Commons CC0 1.0 Universal Public Domain
  Dedication, and waive all copyright and related rights to the work.
  See \url{http://creativecommons.org/publicdomain/zero/1.0/} for the
  CC0 dedication.}

\author{Raghavendra Nyshadham\thanks{\cczero} \\
  {\normalsize\nolinkurl{rn@raghnysh.com}}}

\hypersetup{pdfauthor={Raghavendra Nyshadham (rn@raghnysh.com)}}

\date{2023-10-02}

\begin{document}

\begin{titlingpage}
  \maketitle

  \begin{abstract}
    This document describes my NixOS configuration.  I use the Noweb
    literate programming system to obtain from this document a NixOS
    configuration file and a PDF file of the document.  The current
    version of the document is available at
    \url{https://github.com/raghnysh/nixoscfg}.

    \ghtopics{nixos, system-configuration}
  \end{abstract}
\end{titlingpage}

\tableofcontents

\section{Introduction}
\label{sec:xikfhzau}

This document describes my NixOS configuration.  I use the Noweb
literate programming system to obtain from this document a NixOS
configuration file and a PDF file of the document.  The current
version of the document is available at
\url{https://github.com/raghnysh/nixoscfg}.

The NixOS configuration consists of a single file
\filename{configuration.nix}, which is located in the directory
\filename{/etc/nixos/}.  This is the configuration file that Noweb
generates from this document.  The file consists entirely of settings
for various parameters.  There are broadly two kinds of settings:
system settings and user settings.  System settings are for parameters
that affect the entire system, whereas user settings are for
parameters that affect just the current user, that is, me.

The system settings are fully documented in the man page of
\filename{configuration.nix} \parencite{bib:5ndx9q4j}.  As for the
user settings, I use the NixOS module \emph{Home Manager}, which
enables me to include the user settings also in the file
\filename{configuration.nix}.  The settings provided by Home Manager
are documented in the man page of \filename{home-configuration.nix}
\parencite{bib:vxfvl1fo}.

Without the Home Manager NixOS module, the user settings would be
distributed over multiple files in my home directory, such as
\filename{.bashrc}, \filename{.inputrc}, and
\filename{.emacs.d/init.el}.  I find it inconvenient to spread the
configuration like this, and prefer to have all my settings in a
single file.  (It is even better that this single file
\filename{configuration.nix} contains the system settings also because
it means that I only have to keep track of this one file for the
entire configuration of the computer.  No more worries about backing
up varied configuration files scattered over the hard disk.)

\section{Base versions}
\label{sec:nfbc9c13}

I first specify the base versions of NixOS and Home Manager.  NixOS
and Home Manager will try to remain compatible with the respective
base versions whenever they are upgraded.  I installed Home Manager
for the NixOS 23.05 release, so I will use that number as the common
base version of both NiXOS and Home Manager.

\begin{codechunk}
\nextchunklabel{chk:v2y4tcc5}
<<Common base version>>=
23.05
@
\end{codechunk}

\begin{codechunk}
\nextchunklabel{chk:ab5rprt3}
<<System base version setting>>=
system.stateVersion = "<<Common base version>>";
@ %def system.stateVersion
\end{codechunk}

\begin{codechunk}
\nextchunklabel{chk:n2jcgc64}
<<Home Manager base version setting>>=
home.stateVersion = "<<Common base version>>";
@ %def home.stateVersion
\end{codechunk}

\section{Networking}
\label{sec:wtcs4nl2}

The networking setup is quite simple.  I just set the hostname of the
computer, and hand over the control of everything else to the
NetworkManager application \parencite{bib:abdahnqa}.

\begin{codechunk}
\nextchunklabel{chk:ldypnl10}
<<Network settings>>=
<<Hostname setting>>
<<Pass control to NetworkManager>>
@
\end{codechunk}

\begin{codechunk}
\nextchunklabel{chk:5f4lk1lm}
<<Hostname setting>>=
networking.hostName = "bastet";
@ %def networking.hostname
\end{codechunk}

\begin{codechunk}
\nextchunklabel{chk:3jf5xa81}
<<Pass control to NetworkManager>>=
networking.networkmanager.enable = true;
@ %def networking.networkmanager.enable
\end{codechunk}

The users who need to control the NetworkManager application must be
added to the appropriate user group:
\begin{codechunk}
\nextchunklabel{chk:oqyve0v3}
<<NetworkManager group>>=
networkmanager
@ %def networkmanager
\end{codechunk}

\section{Date and time}
\label{sec:jhrur9yx}

The date and time settings are specified by the time zone.
\begin{codechunk}
\nextchunklabel{chk:smjj65dp}
<<Time zone setting>>=
time.timeZone = "Asia/Kolkata";
@ %def time.timeZone
\end{codechunk}

\section{Locale settings}
\label{sec:3dmlfks5}

\firstterm{Locale} settings specify the language used on this system
for messages and such, and the preferences for linguistic aspects of
the user interface of the system such as the order of characters to be
used in sorting \parencite{bib:nhg983t7}.  These settings are a part
of the process of \firstterm{internationalisation} (which word is
abbreviated as \firstterm{i18n}), whose aim is to design software so
that it can be easily adapted to different cultural environments
\parencite{bib:kiy97d4i}.
\begin{codechunk}
\nextchunklabel{chk:2uu0q8ox}
<<Locale settings>>=
<<Base language setting>>
<<Sorting order setting>>
@
\end{codechunk}

The base language setting is used by applications as the default
specification of language when there is no other explicit instruction
as to what language should be used by the application for its user
interfaces.  I choose British English, the language and the variant of
that language that I am most comfortable with.
\begin{codechunk}
\nextchunklabel{chk:k2trmtxk}
<<Base language setting>>=
i18n.defaultLocale = "en_GB.UTF-8";
@ %def i18n.defaultLocale
\end{codechunk}

When a list of words is sorted (as in the output of the \nwverb|ls|
command), an order that is commonly used is one in which numbers
precede upper case letters, which in turn precede lower case letters.
This order is specified with the following locale setting:
\begin{codechunk}
\nextchunklabel{chk:9qh82y4i}
<<Sorting order setting>>=
i18n.extraLocaleSettings.LC_COLLATE = "C.UTF-8";
@ %def i18n.extraLocaleSettings.LC_COLLATE
\end{codechunk}

@
\end{codechunk}

\section{Assembling the configuration file}
\label{sec:p9imo12d}

\begin{codechunk}
\nextchunklabel{chk:o7ygwvzn}
<<configuration-noweb.nix>>=
{
  <<System base version setting>>
  <<Network settings>>
  home-manager.users.raghnysh = { pkgs, ... }: {
    <<Home Manager base version setting>>
  };
}
@
\end{codechunk}

\bibsection

\nowebchunkssection

\nowebindexsection

\end{document}

%%% End of file `configuration.nw'
